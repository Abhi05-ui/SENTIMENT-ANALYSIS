# -*- coding: utf-8 -*-
"""CodTechIT-04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FEbJ8OZSVLpqpYd918fQ-8mRq1FBSMQE
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
import logging
from nltk.sentiment import SentimentIntensityAnalyzer

# Suppress NLTK download messages
logging.getLogger("nltk").setLevel(logging.CRITICAL)

# Download NLTK resources
nltk.download('vader_lexicon', quiet=True)

# Load dataset
file_path = "/content/ai_ghibli_trend_dataset_v2.csv"
df = pd.read_csv(file_path)

# Preview the dataset
print("Dataset Overview:")
print(df.head())

# Function to clean text data
def clean_text(text):
    """
    Function to clean and preprocess the text:
    - Convert text to lowercase
    """
    text = str(text).lower()  # Convert to lowercase
    return text

# Apply text cleaning function to the top_comment column
df['clean_comment'] = df['top_comment'].apply(clean_text)

# Initialize Sentiment Analyzer
sia = SentimentIntensityAnalyzer()

# Apply sentiment analysis
df['sentiment_score'] = df['clean_comment'].apply(lambda x: sia.polarity_scores(x)['compound'])
df['sentiment_label'] = df['sentiment_score'].apply(lambda x: 'Positive' if x > 0 else ('Negative' if x < 0 else 'Neutral'))

# Print preview of sentiment labels
print("\nSentiment Labels Preview:")
print(df[['clean_comment', 'sentiment_label']].head())

# Model evaluation - Classification report
from sklearn.metrics import classification_report

# Visualization: Sentiment Distribution
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='sentiment_label', hue='sentiment_label', palette="coolwarm", legend=False)
plt.title("Sentiment Analysis of Comments")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()

# Additional Insights:
print("\nAverage Sentiment Scores:")
print(df['sentiment_score'].describe())

# Shows the most positive and negative comments
most_positive = df.loc[df['sentiment_score'].idxmax()]
most_negative = df.loc[df['sentiment_score'].idxmin()]

print("\nMost Positive Comment:")
print(most_positive['top_comment'])
print("\nMost Negative Comment:")
print(most_negative['top_comment'])